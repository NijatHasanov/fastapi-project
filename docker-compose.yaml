version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=fastapi_db
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-key-change-this-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://localhost:8000"]}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - WORKERS_COUNT=4
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    command: >
      bash -c "
        echo 'Waiting for database to be ready...' &&
        python -c 'import time; time.sleep(5)' &&
        alembic upgrade head &&
        gunicorn app.main:app
        --workers ${WORKERS_COUNT:-4}
        --worker-class uvicorn.workers.UvicornWorker
        --bind 0.0.0.0:8000
        --access-logfile -
        --error-logfile -
        --log-level ${LOG_LEVEL:-info}
      "

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=fastapi_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
    command: 
      - "postgres"
      - "-c"
      - "max_connections=200"

volumes:
  postgres_data:
    name: fastapi_postgres_data
